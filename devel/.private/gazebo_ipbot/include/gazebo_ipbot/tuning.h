// Generated by gencpp from file gazebo_ipbot/tuning.msg
// DO NOT EDIT!


#ifndef GAZEBO_IPBOT_MESSAGE_TUNING_H
#define GAZEBO_IPBOT_MESSAGE_TUNING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>

namespace gazebo_ipbot
{
template <class ContainerAllocator>
struct tuning_
{
  typedef tuning_<ContainerAllocator> Type;

  tuning_()
    : lkp()
    , lkd()
    , lki()
    , akp()
    , akd()
    , aki()
    , vel()  {
    }
  tuning_(const ContainerAllocator& _alloc)
    : lkp(_alloc)
    , lkd(_alloc)
    , lki(_alloc)
    , akp(_alloc)
    , akd(_alloc)
    , aki(_alloc)
    , vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int16_<ContainerAllocator>  _lkp_type;
  _lkp_type lkp;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _lkd_type;
  _lkd_type lkd;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _lki_type;
  _lki_type lki;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _akp_type;
  _akp_type akp;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _akd_type;
  _akd_type akd;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _aki_type;
  _aki_type aki;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::gazebo_ipbot::tuning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_ipbot::tuning_<ContainerAllocator> const> ConstPtr;

}; // struct tuning_

typedef ::gazebo_ipbot::tuning_<std::allocator<void> > tuning;

typedef boost::shared_ptr< ::gazebo_ipbot::tuning > tuningPtr;
typedef boost::shared_ptr< ::gazebo_ipbot::tuning const> tuningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_ipbot::tuning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_ipbot::tuning_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gazebo_ipbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'gazebo_ipbot': ['/home/iarc/pi_ws/src/gazebo_ipbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_ipbot::tuning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_ipbot::tuning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_ipbot::tuning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_ipbot::tuning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_ipbot::tuning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_ipbot::tuning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_ipbot::tuning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cd8aa6abc2468ca69bf190c916f0446";
  }

  static const char* value(const ::gazebo_ipbot::tuning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cd8aa6abc2468caULL;
  static const uint64_t static_value2 = 0x69bf190c916f0446ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_ipbot::tuning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_ipbot/tuning";
  }

  static const char* value(const ::gazebo_ipbot::tuning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_ipbot::tuning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int16 lkp\n\
std_msgs/Int16 lkd\n\
std_msgs/Int16 lki\n\
std_msgs/Int16 akp\n\
std_msgs/Int16 akd\n\
std_msgs/Int16 aki\n\
std_msgs/Int16 vel\n\
\n\
================================================================================\n\
MSG: std_msgs/Int16\n\
int16 data\n\
";
  }

  static const char* value(const ::gazebo_ipbot::tuning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_ipbot::tuning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lkp);
      stream.next(m.lkd);
      stream.next(m.lki);
      stream.next(m.akp);
      stream.next(m.akd);
      stream.next(m.aki);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tuning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_ipbot::tuning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_ipbot::tuning_<ContainerAllocator>& v)
  {
    s << indent << "lkp: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.lkp);
    s << indent << "lkd: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.lkd);
    s << indent << "lki: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.lki);
    s << indent << "akp: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.akp);
    s << indent << "akd: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.akd);
    s << indent << "aki: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.aki);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_IPBOT_MESSAGE_TUNING_H
