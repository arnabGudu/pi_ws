# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_ipbot/tuning.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class tuning(genpy.Message):
  _md5sum = "8cd8aa6abc2468ca69bf190c916f0446"
  _type = "gazebo_ipbot/tuning"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Int16 lkp
std_msgs/Int16 lkd
std_msgs/Int16 lki
std_msgs/Int16 akp
std_msgs/Int16 akd
std_msgs/Int16 aki
std_msgs/Int16 vel

================================================================================
MSG: std_msgs/Int16
int16 data
"""
  __slots__ = ['lkp','lkd','lki','akp','akd','aki','vel']
  _slot_types = ['std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lkp,lkd,lki,akp,akd,aki,vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tuning, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lkp is None:
        self.lkp = std_msgs.msg.Int16()
      if self.lkd is None:
        self.lkd = std_msgs.msg.Int16()
      if self.lki is None:
        self.lki = std_msgs.msg.Int16()
      if self.akp is None:
        self.akp = std_msgs.msg.Int16()
      if self.akd is None:
        self.akd = std_msgs.msg.Int16()
      if self.aki is None:
        self.aki = std_msgs.msg.Int16()
      if self.vel is None:
        self.vel = std_msgs.msg.Int16()
    else:
      self.lkp = std_msgs.msg.Int16()
      self.lkd = std_msgs.msg.Int16()
      self.lki = std_msgs.msg.Int16()
      self.akp = std_msgs.msg.Int16()
      self.akd = std_msgs.msg.Int16()
      self.aki = std_msgs.msg.Int16()
      self.vel = std_msgs.msg.Int16()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7h().pack(_x.lkp.data, _x.lkd.data, _x.lki.data, _x.akp.data, _x.akd.data, _x.aki.data, _x.vel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lkp is None:
        self.lkp = std_msgs.msg.Int16()
      if self.lkd is None:
        self.lkd = std_msgs.msg.Int16()
      if self.lki is None:
        self.lki = std_msgs.msg.Int16()
      if self.akp is None:
        self.akp = std_msgs.msg.Int16()
      if self.akd is None:
        self.akd = std_msgs.msg.Int16()
      if self.aki is None:
        self.aki = std_msgs.msg.Int16()
      if self.vel is None:
        self.vel = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.lkp.data, _x.lkd.data, _x.lki.data, _x.akp.data, _x.akd.data, _x.aki.data, _x.vel.data,) = _get_struct_7h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7h().pack(_x.lkp.data, _x.lkd.data, _x.lki.data, _x.akp.data, _x.akd.data, _x.aki.data, _x.vel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lkp is None:
        self.lkp = std_msgs.msg.Int16()
      if self.lkd is None:
        self.lkd = std_msgs.msg.Int16()
      if self.lki is None:
        self.lki = std_msgs.msg.Int16()
      if self.akp is None:
        self.akp = std_msgs.msg.Int16()
      if self.akd is None:
        self.akd = std_msgs.msg.Int16()
      if self.aki is None:
        self.aki = std_msgs.msg.Int16()
      if self.vel is None:
        self.vel = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.lkp.data, _x.lkd.data, _x.lki.data, _x.akp.data, _x.akd.data, _x.aki.data, _x.vel.data,) = _get_struct_7h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7h = None
def _get_struct_7h():
    global _struct_7h
    if _struct_7h is None:
        _struct_7h = struct.Struct("<7h")
    return _struct_7h
